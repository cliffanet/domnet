#!/usr/bin/perl

use strict;
use warnings;
use utf8;

use JSON::XS;
use LWP::UserAgent;
use Encode;

my $dir = $0;
$dir =~ s/[\\\/]?[^\\\/]+$//;

########################################################################################################################

$ENV{PERL_LWP_SSL_VERIFY_HOSTNAME} = 0;

my @domain = qw(
    googlevideo.com 
    youtu.be 
    youtube.com 
    youtubei.googleapis.com 
    youtubeembeddedplayer.googleapis.com 
    ytimg.l.google.com 
    ytimg.com 
    jnn-pa.googleapis.com 
    youtube-nocookie.com 
    youtube-ui.l.google.com 
    yt-video-upload.l.google.com 
    wide-youtube.l.google.com 
    youtubekids.com

    googlevideo.com

    intel.com
    grabcad.com
);

my @host = qw(
    www.windguru.cz
);

my @static = qw(
    94.140.14.0/24
    188.177.14.0/23
    209.85.233.0/24
    212.188.37.0/24
    216.58.212.0/24

    8.34.208.0/20
    8.35.192.0/20
    23.236.48.0/20
    23.251.128.0/19
    34.0.0.0/10
    35.184.0.0/13
    35.192.0.0/14
    35.196.0.0/15
    35.198.0.0/16
    35.199.0.0/17
    35.199.128.0/18
    35.200.0.0/13
    35.208.0.0/12
    64.18.0.0/20
    64.233.160.0/19
    66.102.0.0/20
    66.249.64.0/19
    70.32.128.0/19
    72.14.192.0/18
    74.114.24.0/21
    74.125.0.0/16
    104.132.0.0/23
    104.133.0.0/23
    104.134.0.0/15
    104.156.64.0/18
    104.237.160.0/19
    108.59.80.0/20
    108.170.192.0/18
    108.177.0.0/17
    130.211.0.0/16
    136.112.0.0/12
    142.250.0.0/15
    146.148.0.0/17
    162.216.148.0/22
    162.222.176.0/21
    172.110.32.0/21
    172.217.0.0/16
    172.253.0.0/16
    173.194.0.0/16
    173.255.112.0/20
    192.158.28.0/22
    192.178.0.0/15
    193.186.4.0/24
    199.36.154.0/23
    199.36.156.0/24
    199.192.112.0/22
    199.223.232.0/21
    207.223.160.0/20
    208.65.152.0/22
    208.68.108.0/22
    208.81.188.0/22
    208.117.224.0/19
    209.85.128.0/17
    216.58.192.0/19
    216.239.32.0/19
    216.239.36.0/24
    216.239.38.0/23
    216.239.40.0/22
    34.64.0.0/10
    34.128.0.0/10
);

sub netupdate {
    my $fname = '/home/routes.conf' || return;
    my $chg = shift;
    return if !$chg && (-f $fname);

    open(my $fh, '>', $fname) || return wrlog('Can\'t open file \'%s\': %s', $fname, $!);

    foreach my $n (sort { $a->{net} cmp $b->{net} } @_) {
        print $fh "    route $n->{net} recursive 0.0.0.0;\n";
    }

    close $fh;

    `/usr/local/etc/rc.d/bird restart`;

    wrlog('File \'%s\' updated', $fname);
}


my $logfile = '';#'/var/log/domnet.update.log';
my $pidfile = '';#'/var/run/domnet.update.pid';
my $dbfile = $dir . '/domnet.db';


########################################################################################################################

my $pid;
if ($pidfile) {
    $pid = PidFile->new($pidfile) || exit;
}

my @net = netload();
my $chg = 0;
foreach my $dom (@domain) {
    #print "domain: $dom\n";
    my @ip = domain2ip($dom);

    foreach my $ip (@ip) {
        my $net = findnet($ip, @net);
        #print "    ip: $ip\n";
        if ($net) {
            $net->{update} = 1;
            next;
        }

        my @r = ripe_ip2net($ip);
        @r || wrlog('Not found nets for IP: %s', $ip);
        
        foreach my $r (@r) {
            $r->{net} = delete($r->{route});
            #print "    net: $r->{net}\n";
            $r->{update} = 1;
            $chg ++;
            wrlog('New Net: [AS%d] %s (by domain: %s, IP: %s)', $r->{origin}, $r->{net}, $dom, $ip);
        }

        # В данном проекте берём все подсети, которые вернул RIPE.
        # В реальности RIPE отдаёт обычно более одной подсети, например:
        #   - 142.250.0.0/15
        #   - 142.250.184.0/24
        # По-хорошему, надобы, оставить только самую маленькую подсеть (142.250.184.0/24),
        # но пока что в этом острой необходимости нет, поэтому для упрощения будем использовать
        # все сети.
        push @net, @r;
    }
}

foreach my $host (@host) {
    #print "host: $host\n";
    my @ip = domain2ip($host);

    foreach my $ip (@ip) {
        my $net = findnet($ip, @net);
        #print "    ip: $ip\n";
        if ($net) {
            $net->{update} = 1;
            next;
        }

        $chg ++;
        push @net, { net => $ip . '/32', update => 1 };
    }
}

foreach my $n (@net) {
    next if $n->{update} || (($n->{actual}||0) > 1);
    $n->{remove} = 1;
    $chg ++;
}
@net = grep { !$_->{remove} } @net;

netupdate($chg, @net);
netsave(@net);

#

########################################################################################################################

sub netload {
    my $net = db('select net,origin,actual from nets');
    return
        (map { { net => $_, origin => 0, actual => 10, static => 1 } } @static),
        (map { { net => $_->[0], origin => int($_->[1]), actual => int($_->[2]) } } @{ $net || [] });
}

sub netsave {
    db('update nets set actual=actual-1') || return;

    foreach my $n (@_) {
        $n->{update} || next;
        next if $n->{static};
        db(
            'replace into nets (net, origin, actual) values (\'%s\', \'%d\', 10);',
            $n->{net},
            $n->{origin}||0
        ) || return;
    }

    db('delete from nets where actual <= 0') || return;
    
    return 1;
}

########################################################################################################################

sub findnet {
    my $ip = shift;

    my $ipn = ipn($ip) || return;

    foreach my $n (@_) {
        my ($netn, $mskn) = netn($n->{net});
        next if !$netn || ($netn != ($ipn & $mskn));
        return $n;
    }

    return;
}

sub ipn {
    my $ip = shift;
    return if $ip !~ /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/;
    return if ($1 > 255) || ($2 > 255) || ($3 > 255) || ($4 > 255);

    return (int($1) << 24) | (int($2) << 16) | (int($3) << 8) | int($4);
}

sub ipa {
    my $ip = shift;
    
    if ($ip =~ /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/) {
        return sprintf '%d.%d.%d.%d', $1, $2, $3, $4;
    }
    
    return if $ip !~ /^\d+$/;
    $ip = int $ip;

    return sprintf(
        '%d.%d.%d.%d',
        ($ip >> 24) & 0xff,
        ($ip >> 16) & 0xff,
        ($ip >> 8 ) & 0xff,
        $ip & 0xff
    );
}

sub maskn {
    my $mask = shift() || return 0;
    $mask = 32 if $mask > 32;
    my $n = 0;
    for(; $mask > 0; $mask--) {
        $n = $n | (1 << (32-$mask));
    }

    return $n;
}

sub netn {
    my ($net, $mask) = split('/', shift());
    
    my $ipn = ipn($net);
    defined($ipn) || return;

    $mask = 32 if !defined($mask) || ($mask !~ /^\d+$/);
    my $mskn = maskn($mask);
    return ($ipn & $mskn, $mskn, int $mask);
}

########################################################################################################################

sub domain2ip {
    my $dom = shift;

    my @row =
        map { s/\s+$//; $_; }
        `dig "$dom" +noall +answer`;
    
    my @ip = ();
    foreach (@row) {
        my ($host, $ttl, $in, $type, $ip) = split /\s+/;
        next if !$type || ($type ne 'A') || !$ip || ($ip !~ /^\d+\.\d+\.\d+\.\d+$/);
        push @ip, $ip;
    }

    return @ip;
}

########################################################################################################################

sub ripe_ip2net {
    my $ip = shift;

    my $d = get('https://stat.ripe.net/data/whois/data.json?resource=' . $ip);

    return if ref($d->{data}) ne 'HASH';
    my $rall = $d->{data}->{irr_records};
    return if ref($rall) ne 'ARRAY';

    my @net = ();
    foreach my $r (@$rall) {
        next if ref($r) ne 'ARRAY';
        my $n = {
            map { ($_->{key} => $_->{value}) }
            grep {
                (ref($_) eq 'HASH') &&
                (($_->{key}||'') =~ /^(route|origin)$/)
            }
            @$r
        };
        $n->{route} || next;
        push @net, $n;
    }

    return @net;
}

sub get {
    my $url = shift;

    # http prepare
    my $req = eval { HTTP::Request->new(GET => $url); };
    if (!$req) {
        wrlog('req prepare: %s', $@);
        return;
    }

    wrlog("GET: %s", $url);

    # Выполнение HTTP-запроса
    my $ua = LWP::UserAgent->new;
    my $r = $ua->request($req);

    # Смотрим результат выполнения
    my $code    = $r->code();
    my $reply   = $r->decoded_content();
    my $data    = eval { JSON::XS->new->utf8->decode( $reply ) };

    wrlog('ret[%s]: %s', $code, $reply) if $code != 200;
    return $data;
}


########################################################################################################################
##

=pod

CREATE TABLE IF NOT EXISTS "nets"
(
    [id] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [net] CHAR(32)  NOT NULL,
    [origin] CHAR(32)  NOT NULL,
    [actual] INTEGER  NOT NULL
);

CREATE UNIQUE INDEX [id] ON "nets" ([id]);
CREATE UNIQUE INDEX [net] ON "nets" ([net]);

=cut

# не смог нормально поставить на mac DBD::Sqlite, поэтому вручную через утилиту sqlite3
sub db {
    my $sql = shift;
    $sql = sprintf($sql, @_) if @_;

    $sql =~ s/([\"\\])/\\$1/g;
    my $cmd = 'sqlite3 ' . $dbfile . ' "' . $sql . '"';
    wrlog('DB: %s', $cmd);

    my @r = map { s/\s+$//; $_ } `$cmd`;
    return [] if !@r || ((@r == 1) && ($r[0] eq ''));

    if ($r[0] =~ /error/i) {
        wrlog('DB fail: %s', $_) foreach @r;
    }

    return [ map { [ split '\|' ] } @r ];
}

########################################################################################################################

#####   wrlog($str, ... params ...)
#####   
#####   Запись в лог-файл.
#####   Местоположение лог-файла указано в $logdir в заголовке файла

sub wrlog {
    my $s = shift;
    $s = sprintf($s, @_) if @_;

    my $time = localtime(time);

    Encode::_utf8_off($s);
    if (!$logfile) {
        print "$time [$0] [$$] $s\n";
    }
    elsif (open(my $fh, '>>', $logfile)) {
        print $fh "$time [$0] [$$] $s\n";
        close $fh;
    }
    else {
        print "Can\'t open log file($logfile): $!\n";
        print "$time [$0] [$$] $s\n";
    }
}

########################################################################################################################

#####   PidFile
#####   
#####   Класс для контроля запуска процесса через PID-файл.
#####   
#####   Инициализация:
#####   
#####       my $pid = PidFile->new("/var/run/$me.pid") || exit;
#####   
#####       При этом будет:
#####       - проверен PID-файл и его валидность
#####       - создан PID-файл
#####       - перехвачены INT/TERM-прерывания для корректного выхода
#####   
#####       При любых проблемах с PID-файлом будет возвращено undef.
#####   
#####   Уничтожение
#####   
#####       Рассчитано на штатное уничтожение переменной $pid,
#####       хранящей результат PidFile->new.
#####       Как только переменная будет стёрта, то и PID-файл будет удалён.

package PidFile;

sub wrlog { ::wrlog(@_) }

sub new {
    my ($class, $file) = @_;

    if (-e $file) {
        wrlog('Last pid is present!');

        my $fh;
        if (!open($fh, $file)) {
            wrlog('Warn start(%s) Last proccess may be alive.!', $!);
            return;
        }
        my $pid = int <$fh>;
        close $fh;

        if (($pid > 1) && kill(0, $pid)) {
            wrlog("Program already running (%d)!", $pid);
            return;
        }
    }

    my $fh;
    if (!open($fh, ">$file")) {
        wrlog('Can\'t make pidfile (%s): %s', $file, $!);
        return;
    }

    print $fh $$;
    close $fh;

    my $self = bless({ file => $file }, $class);

    $SIG{INT}  = sub { wrlog('interrupt');  exit; };
    $SIG{QUIT} = sub { wrlog('quit');       exit; };
    $SIG{TERM} = sub { wrlog('terminate');  exit; };
    $SIG{KILL} = sub { wrlog('killed');     exit; };

    return $self;
}

DESTROY {
    my $self = shift() || return;

    my $file = $self->{file} || return;
    unlink($file) || wrlog("having trouble deleting $file: $!");
}
